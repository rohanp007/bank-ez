{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport { EnsureSingleNavigator } from \"./EnsureSingleNavigator.js\";\nimport { NavigationStateContext } from \"./NavigationStateContext.js\";\nimport { StaticContainer } from \"./StaticContainer.js\";\nimport { useOptionsGetters } from \"./useOptionsGetters.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport function SceneView(_ref) {\n  let {\n    screen,\n    route,\n    navigation,\n    routeState,\n    getState,\n    setState,\n    options,\n    clearOptions\n  } = _ref;\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const {\n    addOptionsGetter\n  } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation\n  });\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  const setCurrentState = React.useCallback(child => {\n    const state = getState();\n    setState({\n      ...state,\n      routes: state.routes.map(r => {\n        if (r.key !== route.key) {\n          return r;\n        }\n        const nextRoute = {\n          ...r,\n          state: child\n        };\n\n        // Before updating the state, cleanup any nested screen and state\n        // This will avoid the navigator trying to handle them again\n        if (nextRoute.params && ('state' in nextRoute.params && typeof nextRoute.params.state === 'object' && nextRoute.params.state !== null || 'screen' in nextRoute.params && typeof nextRoute.params.screen === 'string')) {\n          // @ts-expect-error: we don't have correct type for params\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {\n            state,\n            screen,\n            params,\n            initial,\n            ...rest\n          } = nextRoute.params;\n          if (Object.keys(rest).length) {\n            nextRoute.params = rest;\n          } else {\n            delete nextRoute.params;\n          }\n        }\n        return nextRoute;\n      })\n    });\n  }, [getState, route.key, setState]);\n  const isInitialRef = React.useRef(true);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state: routeState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return /*#__PURE__*/_jsx(NavigationStateContext.Provider, {\n    value: context,\n    children: /*#__PURE__*/_jsx(EnsureSingleNavigator, {\n      children: /*#__PURE__*/_jsx(StaticContainer, {\n        name: screen.name,\n        render: ScreenComponent || screen.children,\n        navigation: navigation,\n        route: route,\n        children: ScreenComponent !== undefined ? /*#__PURE__*/_jsx(ScreenComponent, {\n          navigation: navigation,\n          route: route\n        }) : screen.children !== undefined ? screen.children({\n          navigation,\n          route\n        }) : null\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","EnsureSingleNavigator","NavigationStateContext","StaticContainer","useOptionsGetters","jsx","_jsx","SceneView","_ref","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","useRef","getKey","useCallback","current","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","nextRoute","params","initial","rest","Object","keys","length","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","Provider","value","children","name","render"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\core\\src\\SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport { EnsureSingleNavigator } from './EnsureSingleNavigator';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { StaticContainer } from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport { useOptionsGetters } from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) => {\n          if (r.key !== route.key) {\n            return r;\n          }\n\n          const nextRoute = { ...r, state: child };\n\n          // Before updating the state, cleanup any nested screen and state\n          // This will avoid the navigator trying to handle them again\n          if (\n            nextRoute.params &&\n            (('state' in nextRoute.params &&\n              typeof nextRoute.params.state === 'object' &&\n              nextRoute.params.state !== null) ||\n              ('screen' in nextRoute.params &&\n                typeof nextRoute.params.screen === 'string'))\n          ) {\n            // @ts-expect-error: we don't have correct type for params\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { state, screen, params, initial, ...rest } =\n              nextRoute.params;\n\n            if (Object.keys(rest).length) {\n              nextRoute.params = rest;\n            } else {\n              delete nextRoute.params;\n            }\n          }\n\n          return nextRoute;\n        }),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}