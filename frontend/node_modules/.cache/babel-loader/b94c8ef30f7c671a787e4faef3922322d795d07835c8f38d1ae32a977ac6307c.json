{"ast":null,"code":"\"use strict\";\n\nimport { createNavigatorFactory, StackActions, StackRouter, useLocale, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StackView } from \"../views/Stack/StackView.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction StackNavigator({\n  id,\n  initialRouteName,\n  children,\n  layout,\n  screenListeners,\n  screenOptions,\n  screenLayout,\n  UNSTABLE_getStateForRouteNamesChange,\n  ...rest\n}) {\n  const {\n    direction\n  } = useLocale();\n  const {\n    state,\n    describe,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(StackRouter, {\n    id,\n    initialRouteName,\n    children,\n    layout,\n    screenListeners,\n    screenOptions,\n    screenLayout,\n    UNSTABLE_getStateForRouteNamesChange\n  });\n  React.useEffect(() =>\n  // @ts-expect-error: there may not be a tab navigator in parent\n  navigation.addListener?.('tabPress', e => {\n    const isFocused = navigation.isFocused();\n\n    // Run the operation in the next frame so we're sure all listeners have been run\n    // This is necessary to know if preventDefault() has been called\n    requestAnimationFrame(() => {\n      if (state.index > 0 && isFocused && !e.defaultPrevented) {\n        // When user taps on already focused tab and we're inside the tab,\n        // reset the stack to replicate native behaviour\n        navigation.dispatch({\n          ...StackActions.popToTop(),\n          target: state.key\n        });\n      }\n    });\n  }), [navigation, state.index, state.key]);\n  return /*#__PURE__*/_jsx(NavigationContent, {\n    children: /*#__PURE__*/_jsx(StackView, {\n      ...rest,\n      direction: direction,\n      state: state,\n      describe: describe,\n      descriptors: descriptors,\n      navigation: navigation\n    })\n  });\n}\nexport function createStackNavigator(config) {\n  return createNavigatorFactory(StackNavigator)(config);\n}","map":{"version":3,"names":["createNavigatorFactory","StackActions","StackRouter","useLocale","useNavigationBuilder","React","StackView","jsx","_jsx","StackNavigator","id","initialRouteName","children","layout","screenListeners","screenOptions","screenLayout","UNSTABLE_getStateForRouteNamesChange","rest","direction","state","describe","descriptors","navigation","NavigationContent","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key","createStackNavigator","config"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\stack\\src\\navigators\\createStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  type DefaultNavigatorOptions,\n  type EventArg,\n  type NavigatorTypeBagBase,\n  type ParamListBase,\n  type StackActionHelpers,\n  StackActions,\n  type StackNavigationState,\n  StackRouter,\n  type StackRouterOptions,\n  type StaticConfig,\n  type TypedNavigator,\n  useLocale,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n  StackNavigationProp,\n} from '../types';\nimport { StackView } from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  string | undefined,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  StackNavigationProp<ParamListBase>\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  id,\n  initialRouteName,\n  children,\n  layout,\n  screenListeners,\n  screenOptions,\n  screenLayout,\n  UNSTABLE_getStateForRouteNamesChange,\n  ...rest\n}: Props) {\n  const { direction } = useLocale();\n\n  const { state, describe, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      layout,\n      screenListeners,\n      screenOptions,\n      screenLayout,\n      UNSTABLE_getStateForRouteNamesChange,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as unknown as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        direction={direction}\n        state={state}\n        describe={describe}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport function createStackNavigator<\n  const ParamList extends ParamListBase,\n  const NavigatorID extends string | undefined = undefined,\n  const TypeBag extends NavigatorTypeBagBase = {\n    ParamList: ParamList;\n    NavigatorID: NavigatorID;\n    State: StackNavigationState<ParamList>;\n    ScreenOptions: StackNavigationOptions;\n    EventMap: StackNavigationEventMap;\n    NavigationList: {\n      [RouteName in keyof ParamList]: StackNavigationProp<\n        ParamList,\n        RouteName,\n        NavigatorID\n      >;\n    };\n    Navigator: typeof StackNavigator;\n  },\n  const Config extends StaticConfig<TypeBag> = StaticConfig<TypeBag>,\n>(config?: Config): TypedNavigator<TypeBag, Config> {\n  return createNavigatorFactory(StackNavigator)(config);\n}\n"],"mappings":";;AAAA,SACEA,sBAAsB,EAMtBC,YAAY,EAEZC,WAAW,EAIXC,SAAS,EACTC,oBAAoB,QACf,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAQ9B,SAASC,SAAS,QAAQ,6BAA0B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAarD,SAASC,cAAcA,CAAC;EACtBC,EAAE;EACFC,gBAAgB;EAChBC,QAAQ;EACRC,MAAM;EACNC,eAAe;EACfC,aAAa;EACbC,YAAY;EACZC,oCAAoC;EACpC,GAAGC;AACE,CAAC,EAAE;EACR,MAAM;IAAEC;EAAU,CAAC,GAAGhB,SAAS,CAAC,CAAC;EAEjC,MAAM;IAAEiB,KAAK;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,UAAU;IAAEC;EAAkB,CAAC,GACnEpB,oBAAoB,CAMlBF,WAAW,EAAE;IACbQ,EAAE;IACFC,gBAAgB;IAChBC,QAAQ;IACRC,MAAM;IACNC,eAAe;IACfC,aAAa;IACbC,YAAY;IACZC;EACF,CAAC,CAAC;EAEJZ,KAAK,CAACoB,SAAS,CACb;EACE;EACAF,UAAU,CAACG,WAAW,GAAG,UAAU,EAAGC,CAAC,IAAK;IAC1C,MAAMC,SAAS,GAAGL,UAAU,CAACK,SAAS,CAAC,CAAC;;IAExC;IACA;IACAC,qBAAqB,CAAC,MAAM;MAC1B,IACET,KAAK,CAACU,KAAK,GAAG,CAAC,IACfF,SAAS,IACT,CAAED,CAAC,CAA2CI,gBAAgB,EAC9D;QACA;QACA;QACAR,UAAU,CAACS,QAAQ,CAAC;UAClB,GAAG/B,YAAY,CAACgC,QAAQ,CAAC,CAAC;UAC1BC,MAAM,EAAEd,KAAK,CAACe;QAChB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,EACJ,CAACZ,UAAU,EAAEH,KAAK,CAACU,KAAK,EAAEV,KAAK,CAACe,GAAG,CACrC,CAAC;EAED,oBACE3B,IAAA,CAACgB,iBAAiB;IAAAZ,QAAA,eAChBJ,IAAA,CAACF,SAAS;MAAA,GACJY,IAAI;MACRC,SAAS,EAAEA,SAAU;MACrBC,KAAK,EAAEA,KAAM;MACbC,QAAQ,EAAEA,QAAS;MACnBC,WAAW,EAAEA,WAAY;MACzBC,UAAU,EAAEA;IAAW,CACxB;EAAC,CACe,CAAC;AAExB;AAEA,OAAO,SAASa,oBAAoBA,CAmBlCC,MAAe,EAAmC;EAClD,OAAOrC,sBAAsB,CAACS,cAAc,CAAC,CAAC4B,MAAM,CAAC;AACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}