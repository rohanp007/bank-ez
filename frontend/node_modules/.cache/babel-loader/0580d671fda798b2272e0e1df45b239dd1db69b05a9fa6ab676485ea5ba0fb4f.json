{"ast":null,"code":"\"use strict\";\n\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, Easing, Platform, Pressable } from 'react-native';\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport function PlatformPressable({\n  disabled,\n  onPress,\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  hoverEffect,\n  style,\n  children,\n  ...rest\n}) {\n  const {\n    dark\n  } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n  const animateTo = (toValue, duration) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true\n    }).start();\n  };\n  const handlePress = e => {\n    if (Platform.OS === 'web' && rest.href != null) {\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      const hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      const isLeftClick = e.button == null || e.button === 0; // only handle left clicks\n      const isSelfTarget = [undefined, null, '', 'self'].includes(\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      e.currentTarget?.target); // let browser handle \"target=_blank\" etc.\n      if (!hasModifierKey && isLeftClick && isSelfTarget) {\n        e.preventDefault();\n        onPress?.(e);\n      }\n    } else {\n      onPress?.(e);\n    }\n  };\n  const handlePressIn = e => {\n    animateTo(pressOpacity, 0);\n    onPressIn?.(e);\n  };\n  const handlePressOut = e => {\n    animateTo(1, 200);\n    onPressOut?.(e);\n  };\n  return /*#__PURE__*/_jsxs(AnimatedPressable, {\n    accessible: true,\n    accessibilityRole: Platform.OS === 'web' && rest.href != null ? 'link' : 'button',\n    onPress: disabled ? undefined : handlePress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? {\n      color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)',\n      ...android_ripple\n    } : undefined,\n    style: [{\n      cursor: Platform.OS === 'web' || Platform.OS === 'ios' ?\n      // Pointer cursor on web\n      // Hover effect on iPad and visionOS\n      'pointer' : 'auto',\n      opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1\n    }, style],\n    ...rest,\n    children: [/*#__PURE__*/_jsx(HoverEffect, {\n      ...hoverEffect\n    }), children]\n  });\n}\nconst css = String.raw;\nconst CLASS_NAME = `__react-navigation_elements_Pressable_hover`;\nconst CSS_TEXT = css`\n  .${CLASS_NAME} {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: inherit;\n    background-color: var(--overlay-color);\n    opacity: 0;\n    transition: opacity 0.15s;\n  }\n\n  a:hover > .${CLASS_NAME}, button:hover > .${CLASS_NAME} {\n    opacity: var(--overlay-hover-opacity);\n  }\n\n  a:active > .${CLASS_NAME}, button:active > .${CLASS_NAME} {\n    opacity: var(--overlay-active-opacity);\n  }\n`;\nconst HoverEffect = ({\n  color,\n  hoverOpacity = 0.08,\n  activeOpacity = 0.16\n}) => {\n  if (Platform.OS !== 'web' || color == null) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"style\", {\n      // @ts-expect-error: href and precedence are only available on React 19\n      href: CLASS_NAME,\n      precedence: \"elements\",\n      children: CSS_TEXT\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: CLASS_NAME,\n      style: {\n        // @ts-expect-error: CSS variables are not typed\n        '--overlay-color': color,\n        '--overlay-hover-opacity': hoverOpacity,\n        '--overlay-active-opacity': activeOpacity\n      }\n    })]\n  });\n};","map":{"version":3,"names":["useTheme","React","Animated","Easing","Platform","Pressable","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AnimatedPressable","createAnimatedComponent","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","OS","Version","PlatformPressable","disabled","onPress","onPressIn","onPressOut","android_ripple","pressColor","pressOpacity","hoverEffect","style","children","rest","dark","opacity","useState","Value","animateTo","toValue","duration","timing","easing","inOut","quad","useNativeDriver","start","handlePress","e","href","hasModifierKey","metaKey","altKey","ctrlKey","shiftKey","isLeftClick","button","isSelfTarget","undefined","includes","currentTarget","target","preventDefault","handlePressIn","handlePressOut","accessible","accessibilityRole","color","cursor","HoverEffect","css","String","raw","CLASS_NAME","CSS_TEXT","hoverOpacity","activeOpacity","precedence","className"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\elements\\src\\PlatformPressable.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  type GestureResponderEvent,\n  Platform,\n  Pressable,\n  type PressableProps,\n  type StyleProp,\n  type ViewStyle,\n} from 'react-native';\n\ntype HoverEffectProps = {\n  color?: string;\n  hoverOpacity?: number;\n  activeOpacity?: number;\n};\n\nexport type Props = Omit<PressableProps, 'style'> & {\n  pressColor?: string;\n  pressOpacity?: number;\n  hoverEffect?: HoverEffectProps;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  href?: string;\n  children: React.ReactNode;\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport function PlatformPressable({\n  disabled,\n  onPress,\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  hoverEffect,\n  style,\n  children,\n  ...rest\n}: Props) {\n  const { dark } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue: number, duration: number) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePress = (e: GestureResponderEvent) => {\n    if (Platform.OS === 'web' && rest.href != null) {\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      const hasModifierKey = e.metaKey || e.altKey || e.ctrlKey || e.shiftKey; // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      const isLeftClick = e.button == null || e.button === 0; // only handle left clicks\n      const isSelfTarget = [undefined, null, '', 'self'].includes(\n        // @ts-expect-error: these properties exist on web, but not in React Native\n        e.currentTarget?.target\n      ); // let browser handle \"target=_blank\" etc.\n      if (!hasModifierKey && isLeftClick && isSelfTarget) {\n        e.preventDefault();\n        onPress?.(e);\n      }\n    } else {\n      onPress?.(e);\n    }\n  };\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    animateTo(pressOpacity, 0);\n    onPressIn?.(e);\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    animateTo(1, 200);\n    onPressOut?.(e);\n  };\n\n  return (\n    <AnimatedPressable\n      accessible\n      accessibilityRole={\n        Platform.OS === 'web' && rest.href != null ? 'link' : 'button'\n      }\n      onPress={disabled ? undefined : handlePress}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? {\n              color:\n                pressColor !== undefined\n                  ? pressColor\n                  : dark\n                    ? 'rgba(255, 255, 255, .32)'\n                    : 'rgba(0, 0, 0, .32)',\n              ...android_ripple,\n            }\n          : undefined\n      }\n      style={[\n        {\n          cursor:\n            Platform.OS === 'web' || Platform.OS === 'ios'\n              ? // Pointer cursor on web\n                // Hover effect on iPad and visionOS\n                'pointer'\n              : 'auto',\n          opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1,\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      <HoverEffect {...hoverEffect} />\n      {children}\n    </AnimatedPressable>\n  );\n}\n\nconst css = String.raw;\n\nconst CLASS_NAME = `__react-navigation_elements_Pressable_hover`;\n\nconst CSS_TEXT = css`\n  .${CLASS_NAME} {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: inherit;\n    background-color: var(--overlay-color);\n    opacity: 0;\n    transition: opacity 0.15s;\n  }\n\n  a:hover > .${CLASS_NAME}, button:hover > .${CLASS_NAME} {\n    opacity: var(--overlay-hover-opacity);\n  }\n\n  a:active > .${CLASS_NAME}, button:active > .${CLASS_NAME} {\n    opacity: var(--overlay-active-opacity);\n  }\n`;\n\nconst HoverEffect = ({\n  color,\n  hoverOpacity = 0.08,\n  activeOpacity = 0.16,\n}: HoverEffectProps) => {\n  if (Platform.OS !== 'web' || color == null) {\n    return null;\n  }\n\n  return (\n    <>\n      <style\n        // @ts-expect-error: href and precedence are only available on React 19\n        href={CLASS_NAME}\n        precedence=\"elements\"\n      >\n        {CSS_TEXT}\n      </style>\n      <div\n        className={CLASS_NAME}\n        style={{\n          // @ts-expect-error: CSS variables are not typed\n          '--overlay-color': color,\n          '--overlay-hover-opacity': hoverOpacity,\n          '--overlay-active-opacity': activeOpacity,\n        }}\n      />\n    </>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}