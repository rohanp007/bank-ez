{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport Color from 'color';\nimport * as React from 'react';\nimport { Animated, InteractionManager, Platform, StyleSheet, View } from 'react-native';\nimport { CardAnimationContext } from \"../../utils/CardAnimationContext.js\";\nimport { getDistanceForDirection } from \"../../utils/getDistanceForDirection.js\";\nimport { getInvertedMultiplier } from \"../../utils/getInvertedMultiplier.js\";\nimport { memoize } from \"../../utils/memoize.js\";\nimport { GestureState, PanGestureHandler } from '../GestureHandler.js';\nimport { CardSheet } from \"./CardSheet.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\nconst hasOpacityStyle = style => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nexport let Card = /*#__PURE__*/function (_React$Component) {\n  function Card(...args) {\n    var _this;\n    _classCallCheck(this, Card);\n    _this = _callSuper(this, Card, [...args]);\n    _defineProperty(_this, \"isCurrentlyMounted\", false);\n    _defineProperty(_this, \"isClosing\", new Animated.Value(FALSE));\n    _defineProperty(_this, \"inverted\", new Animated.Value(getInvertedMultiplier(_this.props.gestureDirection, _this.props.direction === 'rtl')));\n    _defineProperty(_this, \"layout\", {\n      width: new Animated.Value(_this.props.layout.width),\n      height: new Animated.Value(_this.props.layout.height)\n    });\n    _defineProperty(_this, \"isSwiping\", new Animated.Value(FALSE));\n    _defineProperty(_this, \"interactionHandle\", void 0);\n    _defineProperty(_this, \"pendingGestureCallback\", void 0);\n    _defineProperty(_this, \"lastToValue\", void 0);\n    _defineProperty(_this, \"animate\", ({\n      closing,\n      velocity\n    }) => {\n      const {\n        transitionSpec,\n        onOpen,\n        onClose,\n        onTransition,\n        gesture\n      } = _this.props;\n      const toValue = _this.getAnimateToValue({\n        ..._this.props,\n        closing\n      });\n      _this.lastToValue = toValue;\n      _this.isClosing.setValue(closing ? TRUE : FALSE);\n      const spec = closing ? transitionSpec.close : transitionSpec.open;\n      const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      _this.setPointerEventsEnabled(!closing);\n      _this.handleStartInteraction();\n      clearTimeout(_this.pendingGestureCallback);\n      onTransition?.({\n        closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, {\n        ...spec.config,\n        velocity,\n        toValue,\n        useNativeDriver,\n        isInteraction: false\n      }).start(({\n        finished\n      }) => {\n        _this.handleEndInteraction();\n        clearTimeout(_this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (_this.isCurrentlyMounted) {\n            // Make sure to re-open screen if it wasn't removed\n            _this.forceUpdate();\n          }\n        }\n      });\n    });\n    _defineProperty(_this, \"getAnimateToValue\", ({\n      closing,\n      layout,\n      gestureDirection,\n      direction,\n      preloaded\n    }) => {\n      if (!closing && !preloaded) {\n        return 0;\n      }\n      return getDistanceForDirection(layout, gestureDirection, direction === 'rtl');\n    });\n    _defineProperty(_this, \"setPointerEventsEnabled\", enabled => {\n      const pointerEvents = enabled ? 'box-none' : 'none';\n      _this.ref.current?.setPointerEvents(pointerEvents);\n    });\n    _defineProperty(_this, \"handleStartInteraction\", () => {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(_this, \"handleEndInteraction\", () => {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(_this, \"handleGestureStateChange\", ({\n      nativeEvent\n    }) => {\n      const {\n        direction,\n        layout,\n        onClose,\n        onGestureBegin,\n        onGestureCanceled,\n        onGestureEnd,\n        gestureDirection,\n        gestureVelocityImpact\n      } = _this.props;\n      switch (nativeEvent.state) {\n        case GestureState.ACTIVE:\n          _this.isSwiping.setValue(TRUE);\n          _this.handleStartInteraction();\n          onGestureBegin?.();\n          break;\n        case GestureState.CANCELLED:\n        case GestureState.FAILED:\n          {\n            _this.isSwiping.setValue(FALSE);\n            _this.handleEndInteraction();\n            const velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            _this.animate({\n              closing: _this.props.closing,\n              velocity\n            });\n            onGestureCanceled?.();\n            break;\n          }\n        case GestureState.END:\n          {\n            _this.isSwiping.setValue(FALSE);\n            let distance;\n            let translation;\n            let velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              velocity = nativeEvent.velocityX;\n            }\n            const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection, direction === 'rtl') > distance / 2 ? velocity !== 0 || translation !== 0 : _this.props.closing;\n            _this.animate({\n              closing,\n              velocity\n            });\n            if (closing) {\n              // We call onClose with a delay to make sure that the animation has already started\n              // This will make sure that the state update caused by this doesn't affect start of animation\n              _this.pendingGestureCallback = setTimeout(() => {\n                onClose();\n\n                // Trigger an update after we dispatch the action to remove the screen\n                // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n                _this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd?.();\n            break;\n          }\n      }\n    });\n    // Memoize this to avoid extra work on re-render\n    _defineProperty(_this, \"getInterpolatedStyle\", memoize((styleInterpolator, animation) => styleInterpolator(animation)));\n    // Keep track of the animation context when deps changes.\n    _defineProperty(_this, \"getCardAnimation\", memoize((interpolationIndex, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n      index: interpolationIndex,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: _this.isClosing,\n      swiping: _this.isSwiping,\n      inverted: _this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n    _defineProperty(_this, \"ref\", /*#__PURE__*/React.createRef());\n    return _this;\n  }\n  _inherits(Card, _React$Component);\n  return _createClass(Card, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.preloaded) {\n        this.animate({\n          closing: this.props.closing\n        });\n      }\n      this.isCurrentlyMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      const {\n        direction,\n        layout,\n        gestureDirection,\n        closing\n      } = this.props;\n      const {\n        width,\n        height\n      } = layout;\n      if (width !== prevProps.layout.width) {\n        this.layout.width.setValue(width);\n      }\n      if (height !== prevProps.layout.height) {\n        this.layout.height.setValue(height);\n      }\n      if (gestureDirection !== prevProps.gestureDirection) {\n        this.inverted.setValue(getInvertedMultiplier(gestureDirection, direction === 'rtl'));\n      }\n      const toValue = this.getAnimateToValue(this.props);\n      if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n        // We need to trigger the animation when route was closed\n        // The route might have been closed by a `POP` action or by a gesture\n        // When route was closed due to a gesture, the animation would've happened already\n        // It's still important to trigger the animation so that `onClose` is called\n        // If `onClose` is not called, cleanup step won't be performed for gestures\n        this.animate({\n          closing\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.gesture?.stopAnimation();\n      this.isCurrentlyMounted = false;\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      const {\n        direction,\n        layout,\n        gestureDirection,\n        gestureResponseDistance\n      } = this.props;\n      const enableTrackpadTwoFingerGesture = true;\n      const distance = gestureResponseDistance !== undefined ? gestureResponseDistance : gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n      if (gestureDirection === 'vertical') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: 5,\n          hitSlop: {\n            bottom: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      } else if (gestureDirection === 'vertical-inverted') {\n        return {\n          maxDeltaX: 15,\n          minOffsetY: -5,\n          hitSlop: {\n            top: -layout.height + distance\n          },\n          enableTrackpadTwoFingerGesture\n        };\n      } else {\n        const hitSlop = -layout.width + distance;\n        const invertedMultiplier = getInvertedMultiplier(gestureDirection, direction === 'rtl');\n        if (invertedMultiplier === 1) {\n          return {\n            minOffsetX: 5,\n            maxDeltaY: 20,\n            hitSlop: {\n              right: hitSlop\n            },\n            enableTrackpadTwoFingerGesture\n          };\n        } else {\n          return {\n            minOffsetX: -5,\n            maxDeltaY: 20,\n            hitSlop: {\n              left: hitSlop\n            },\n            enableTrackpadTwoFingerGesture\n          };\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      const {\n        styleInterpolator,\n        interpolationIndex,\n        current,\n        gesture,\n        next,\n        layout,\n        insets,\n        overlay,\n        overlayEnabled,\n        shadowEnabled,\n        gestureEnabled,\n        gestureDirection,\n        pageOverflowEnabled,\n        children,\n        containerStyle: customContainerStyle,\n        contentStyle,\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        closing,\n        direction,\n        gestureResponseDistance,\n        gestureVelocityImpact,\n        onClose,\n        onGestureBegin,\n        onGestureCanceled,\n        onGestureEnd,\n        onOpen,\n        onTransition,\n        transitionSpec,\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        ...rest\n      } = this.props;\n      const interpolationProps = this.getCardAnimation(interpolationIndex, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n      const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, interpolationProps);\n      const {\n        containerStyle,\n        cardStyle,\n        overlayStyle,\n        shadowStyle\n      } = interpolatedStyle;\n      const handleGestureEvent = gestureEnabled ? Animated.event([{\n        nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n          translationY: gesture\n        } : {\n          translationX: gesture\n        }\n      }], {\n        useNativeDriver\n      }) : undefined;\n      const {\n        backgroundColor\n      } = StyleSheet.flatten(contentStyle || {});\n      const isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n      return /*#__PURE__*/_jsxs(CardAnimationContext.Provider, {\n        value: interpolationProps,\n        children: [/*#__PURE__*/_jsx(Animated.View, {\n          style: {\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current\n          }\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          ,\n\n          collapsable: false\n        }), /*#__PURE__*/_jsxs(View, {\n          pointerEvents: \"box-none\"\n          // Make sure this view is not removed on the new architecture, as it causes focus loss during navigation on Android.\n          // This can happen when the view flattening results in different trees - due to `overflow` style changing in a parent.\n          ,\n\n          collapsable: false,\n          ...rest,\n          children: [overlayEnabled ? /*#__PURE__*/_jsx(View, {\n            pointerEvents: \"box-none\",\n            style: StyleSheet.absoluteFill,\n            children: overlay({\n              style: overlayStyle\n            })\n          }) : null, /*#__PURE__*/_jsx(Animated.View, {\n            style: [styles.container, containerStyle, customContainerStyle],\n            pointerEvents: \"box-none\",\n            children: /*#__PURE__*/_jsx(PanGestureHandler, {\n              enabled: layout.width !== 0 && gestureEnabled,\n              onGestureEvent: handleGestureEvent,\n              onHandlerStateChange: this.handleGestureStateChange,\n              ...this.gestureActivationCriteria(),\n              children: /*#__PURE__*/_jsxs(Animated.View, {\n                needsOffscreenAlphaCompositing: hasOpacityStyle(cardStyle),\n                style: [styles.container, cardStyle],\n                children: [shadowEnabled && shadowStyle && !isTransparent ? /*#__PURE__*/_jsx(Animated.View, {\n                  style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowStart] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowEnd] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n                    backgroundColor\n                  }, shadowStyle],\n                  pointerEvents: \"none\"\n                }) : null, /*#__PURE__*/_jsx(CardSheet, {\n                  ref: this.ref,\n                  enabled: pageOverflowEnabled,\n                  layout: layout,\n                  style: contentStyle,\n                  children: children\n                })]\n              })\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n}(React.Component);\n_defineProperty(Card, \"defaultProps\", {\n  shadowEnabled: false,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: ({\n    style\n  }) => style ? /*#__PURE__*/_jsx(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.overlay, style]\n  }) : null\n});\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowStart: {\n    start: 0\n  },\n  shadowEnd: {\n    end: 0\n  },\n  shadowVertical: {\n    start: 0,\n    end: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"names":["Color","React","Animated","InteractionManager","Platform","StyleSheet","View","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GestureState","PanGestureHandler","CardSheet","jsx","_jsx","jsxs","_jsxs","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","OS","hasOpacityStyle","style","flattenedStyle","flatten","opacity","Card","_React$Component","args","_this","_classCallCheck","_callSuper","_defineProperty","Value","props","gestureDirection","direction","width","layout","height","closing","velocity","transitionSpec","onOpen","onClose","onTransition","gesture","toValue","getAnimateToValue","lastToValue","isClosing","setValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","handleEndInteraction","isCurrentlyMounted","forceUpdate","preloaded","enabled","pointerEvents","ref","current","setPointerEvents","interactionHandle","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","ACTIVE","isSwiping","CANCELLED","FAILED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","interpolationIndex","next","insetTop","insetRight","insetBottom","insetLeft","index","progress","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","_inherits","_createClass","key","value","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","stopAnimation","gestureActivationCriteria","gestureResponseDistance","enableTrackpadTwoFingerGesture","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","interpolationProps","getCardAnimation","interpolatedStyle","getInterpolatedStyle","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","Provider","collapsable","absoluteFill","styles","container","onGestureEvent","onHandlerStateChange","handleGestureStateChange","needsOffscreenAlphaCompositing","shadow","shadowHorizontal","shadowStart","shadowEnd","shadowVertical","shadowTop","shadowBottom","Component","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset","end"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\Card.tsx"],"sourcesContent":["import type { LocaleDirection } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  InteractionManager,\n  Platform,\n  type StyleProp,\n  StyleSheet,\n  View,\n  type ViewProps,\n  type ViewStyle,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type {\n  GestureDirection,\n  Layout,\n  StackCardInterpolationProps,\n  StackCardStyleInterpolator,\n  TransitionSpec,\n} from '../../types';\nimport { CardAnimationContext } from '../../utils/CardAnimationContext';\nimport { getDistanceForDirection } from '../../utils/getDistanceForDirection';\nimport { getInvertedMultiplier } from '../../utils/getInvertedMultiplier';\nimport { memoize } from '../../utils/memoize';\nimport {\n  GestureState,\n  PanGestureHandler,\n  type PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport { CardSheet, type CardSheetRef } from './CardSheet';\n\ntype Props = ViewProps & {\n  interpolationIndex: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation<number>;\n  current: Animated.AnimatedInterpolation<number>;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  direction: LocaleDirection;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin: () => void;\n  onGestureCanceled: () => void;\n  onGestureEnd: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: number;\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  preloaded: boolean;\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport class Card extends React.Component<Props> {\n  static defaultProps = {\n    shadowEnabled: false,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    if (!this.props.preloaded) {\n      this.animate({\n        closing: this.props.closing,\n      });\n    }\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { direction, layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(\n        getInvertedMultiplier(gestureDirection, direction === 'rtl')\n      );\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // The route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.gesture?.stopAnimation();\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(\n      this.props.gestureDirection,\n      this.props.direction === 'rtl'\n    )\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const { transitionSpec, onOpen, onClose, onTransition, gesture } =\n      this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    this.isClosing.setValue(closing ? TRUE : FALSE);\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n    direction,\n    preloaded,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n    direction: LocaleDirection;\n    preloaded: boolean;\n  }) => {\n    if (!closing && !preloaded) {\n      return 0;\n    }\n\n    return getDistanceForDirection(\n      layout,\n      gestureDirection,\n      direction === 'rtl'\n    );\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.ref.current?.setPointerEvents(pointerEvents);\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      direction,\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.ACTIVE:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n      case GestureState.FAILED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({\n          closing: this.props.closing,\n          velocity,\n        });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection, direction === 'rtl') >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      animation: StackCardInterpolationProps\n    ) => styleInterpolator(animation)\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimation = memoize(\n    (\n      interpolationIndex: number,\n      current: Animated.AnimatedInterpolation<number>,\n      next: Animated.AnimatedInterpolation<number> | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index: interpolationIndex,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { direction, layout, gestureDirection, gestureResponseDistance } =\n      this.props;\n    const enableTrackpadTwoFingerGesture = true;\n\n    const distance =\n      gestureResponseDistance !== undefined\n        ? gestureResponseDistance\n        : gestureDirection === 'vertical' ||\n            gestureDirection === 'vertical-inverted'\n          ? GESTURE_RESPONSE_DISTANCE_VERTICAL\n          : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n        enableTrackpadTwoFingerGesture,\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(\n        gestureDirection,\n        direction === 'rtl'\n      );\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n          enableTrackpadTwoFingerGesture,\n        };\n      }\n    }\n  }\n\n  private ref = React.createRef<CardSheetRef>();\n\n  render() {\n    const {\n      styleInterpolator,\n      interpolationIndex,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      closing,\n      direction,\n      gestureResponseDistance,\n      gestureVelocityImpact,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      onOpen,\n      onTransition,\n      transitionSpec,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    const interpolationProps = this.getCardAnimation(\n      interpolationIndex,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      interpolationProps\n    );\n\n    const { containerStyle, cardStyle, overlayStyle, shadowStyle } =\n      interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={interpolationProps}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View\n          pointerEvents=\"box-none\"\n          // Make sure this view is not removed on the new architecture, as it causes focus loss during navigation on Android.\n          // This can happen when the view flattening results in different trees - due to `overflow` style changing in a parent.\n          collapsable={false}\n          {...rest}\n        >\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View\n                needsOffscreenAlphaCompositing={hasOpacityStyle(cardStyle)}\n                style={[styles.container, cardStyle]}\n              >\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowStart]\n                        : gestureDirection === 'horizontal-inverted'\n                          ? [styles.shadowHorizontal, styles.shadowEnd]\n                          : gestureDirection === 'vertical'\n                            ? [styles.shadowVertical, styles.shadowTop]\n                            : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.ref}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowStart: {\n    start: 0,\n  },\n  shadowEnd: {\n    end: 0,\n  },\n  shadowVertical: {\n    start: 0,\n    end: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}