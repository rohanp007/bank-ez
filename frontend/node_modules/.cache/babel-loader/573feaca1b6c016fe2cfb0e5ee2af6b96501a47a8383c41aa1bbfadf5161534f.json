{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet } from 'react-native';\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators.js\";\nimport { BottomSheetAndroid, DefaultTransition, FadeFromBottomAndroid, FadeFromRightAndroid, ModalFadeTransition, ModalSlideFromBottomIOS, ModalTransition, RevealFromBottomAndroid, ScaleFromCenterAndroid, SlideFromLeftIOS, SlideFromRightIOS } from \"../../TransitionConfigs/TransitionPresets.js\";\nimport { findLastIndex } from \"../../utils/findLastIndex.js\";\nimport { getDistanceForDirection } from \"../../utils/getDistanceForDirection.js\";\nimport { getModalRouteKeys } from \"../../utils/getModalRoutesKeys.js\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens.js\";\nimport { CardContainer } from \"./CardContainer.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst NAMED_TRANSITIONS_PRESETS = {\n  default: DefaultTransition,\n  fade: ModalFadeTransition,\n  fade_from_bottom: FadeFromBottomAndroid,\n  fade_from_right: FadeFromRightAndroid,\n  none: DefaultTransition,\n  reveal_from_bottom: RevealFromBottomAndroid,\n  scale_from_center: ScaleFromCenterAndroid,\n  slide_from_left: SlideFromLeftIOS,\n  slide_from_right: SlideFromRightIOS,\n  slide_from_bottom: Platform.select({\n    ios: ModalSlideFromBottomIOS,\n    default: BottomSheetAndroid\n  })\n};\nconst EPSILON = 1e-5;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nconst getInterpolationIndex = (scenes, index) => {\n  const {\n    cardStyleInterpolator\n  } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent = scenes[i]?.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nconst getIsModalPresentation = cardStyleInterpolator => {\n  return cardStyleInterpolator === forModalPresentationIOS ||\n  // Handle custom modal presentation interpolators as well\n  cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nconst getIsModal = (scene, interpolationIndex, isParentModal) => {\n  if (isParentModal) {\n    return true;\n  }\n  const {\n    cardStyleInterpolator\n  } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nconst getHeaderHeights = (scenes, insets, isParentHeaderShown, isParentModal, layout, previous) => {\n  return scenes.reduce((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle\n    } = curr.descriptor.options;\n    const style = StyleSheet.flatten(headerStyle || {});\n    const height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nconst getDistanceFromOptions = (layout, descriptor, isRTL) => {\n  if (descriptor?.options.gestureDirection) {\n    return getDistanceForDirection(layout, descriptor?.options.gestureDirection, isRTL);\n  }\n  const defaultGestureDirection = descriptor?.options.presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection;\n  const gestureDirection = descriptor?.options.animation ? NAMED_TRANSITIONS_PRESETS[descriptor?.options.animation]?.gestureDirection : defaultGestureDirection;\n  return getDistanceForDirection(layout, gestureDirection, isRTL);\n};\nconst getProgressFromGesture = (gesture, layout, descriptor, isRTL) => {\n  const distance = getDistanceFromOptions({\n    // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n    // This causes blank screen on web if it was previously inside container with display: none\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor, isRTL);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport let CardStack = /*#__PURE__*/function (_React$Component) {\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _callSuper(this, CardStack, [_props]);\n    _defineProperty(_this, \"handleLayout\", e => {\n      const {\n        height,\n        width\n      } = e.nativeEvent.layout;\n      const layout = {\n        width,\n        height\n      };\n      _this.setState((state, props) => {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(_this, \"handleHeaderLayout\", _ref => {\n      let {\n        route,\n        height\n      } = _ref;\n      _this.setState(_ref2 => {\n        let {\n          headerHeights\n        } = _ref2;\n        const previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: {\n            ...headerHeights,\n            [route.key]: height\n          }\n        };\n      });\n    });\n    _defineProperty(_this, \"getFocusedRoute\", () => {\n      const {\n        state\n      } = _this.props;\n      return state.routes[state.index];\n    });\n    _defineProperty(_this, \"getPreviousScene\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const {\n        getPreviousRoute\n      } = _this.props;\n      const {\n        scenes\n      } = _this.state;\n      const previousRoute = getPreviousRoute({\n        route\n      });\n      if (previousRoute) {\n        const previousScene = scenes.find(scene => scene.descriptor.route.key === previousRoute.key);\n        return previousScene;\n      }\n      return undefined;\n    });\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _inherits(CardStack, _React$Component);\n  return _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      const {\n        insets,\n        state,\n        routes,\n        closingRouteKeys,\n        onOpenRoute,\n        onCloseRoute,\n        renderHeader,\n        isParentHeaderShown,\n        isParentModal,\n        onTransitionStart,\n        onTransitionEnd,\n        onGestureStart,\n        onGestureEnd,\n        onGestureCancel,\n        detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios'\n      } = this.props;\n      const {\n        scenes,\n        layout,\n        gestures,\n        headerHeights\n      } = this.state;\n      const focusedRoute = state.routes[state.index];\n      const focusedHeaderHeight = headerHeights[focusedRoute.key];\n      const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(scene => {\n        const options = scene.descriptor.options ?? {};\n        const {\n          headerMode,\n          headerTransparent,\n          headerShown = true\n        } = options;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      let activeScreensLimit = 1;\n      for (let i = scenes.length - 1; i >= 0; i--) {\n        const {\n          options\n        } = scenes[i].descriptor;\n        const {\n          // By default, we don't want to detach the previous screen of the active one for modals\n          detachPreviousScreen = options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== findLastIndex(scenes, scene => {\n            const {\n              cardStyleInterpolator\n            } = scene.descriptor.options;\n            return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator?.name === 'forModalPresentationIOS';\n          }) : true\n        } = options;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          // Check at least last 2 screens before stopping\n          // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n          // For example, (Opaque -> Transparent -> Opaque)\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n      const floatingHeader = /*#__PURE__*/_jsx(React.Fragment, {\n        children: renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [styles.floating, isFloatHeaderAbsolute && [\n          // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n          {\n            height: focusedHeaderHeight\n          }, styles.absolute]]\n        })\n      }, \"header\");\n      return /*#__PURE__*/_jsxs(Background, {\n        children: [isFloatHeaderAbsolute ? null : floatingHeader, /*#__PURE__*/_jsx(MaybeScreenContainer, {\n          enabled: detachInactiveScreens,\n          style: styles.container,\n          onLayout: this.handleLayout,\n          children: [...routes, ...state.preloadedRoutes].map((route, index) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n            // It is possible that for a short period the route appears in both arrays.\n            // Particularly, if the screen is removed with `retain`, then it needs a moment to execute the animation.\n            // However, due to the router action, it immediately populates the `preloadedRoutes` array.\n            // Practically, the logic below takes care that it is rendered only once.\n            const isPreloaded = state.preloadedRoutes.includes(route) && !routes.includes(route);\n            if (state.preloadedRoutes.includes(route) && routes.includes(route) && index >= routes.length) {\n              return null;\n            }\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive = 1;\n            if (index < routes.length - activeScreensLimit - 1 || isPreloaded) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[routes.length - 1];\n              const outputValue = index === routes.length - 1 ? STATE_ON_TOP // the screen is on top after the transition\n              : index >= routes.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n              : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n                inputRange: [0, 1 - EPSILON, 1],\n                outputRange: [1, 1, outputValue],\n                extrapolate: 'clamp'\n              }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n            const {\n              headerShown = true,\n              headerTransparent,\n              freezeOnBlur,\n              autoHideHomeIndicator\n            } = scene.descriptor.options;\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n            const headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(scene, interpolationIndex, isParentModal);\n            const isNextScreenTransparent = scenes[index + 1]?.descriptor.options.presentation === 'transparentModal';\n            const detachCurrentScreen = scenes[index + 1]?.descriptor.options.detachPreviousScreen !== false;\n            return /*#__PURE__*/_jsx(MaybeScreen, {\n              style: [StyleSheet.absoluteFill],\n              enabled: detachInactiveScreens,\n              active: isScreenActive,\n              freezeOnBlur: freezeOnBlur,\n              homeIndicatorHidden: autoHideHomeIndicator,\n              pointerEvents: \"box-none\",\n              children: /*#__PURE__*/_jsx(CardContainer, {\n                index: index,\n                interpolationIndex: interpolationIndex,\n                modal: isModal,\n                active: index === routes.length - 1,\n                focused: focused,\n                closing: closingRouteKeys.includes(route.key),\n                layout: layout,\n                gesture: gesture,\n                scene: scene,\n                safeAreaInsetTop: safeAreaInsetTop,\n                safeAreaInsetRight: safeAreaInsetRight,\n                safeAreaInsetBottom: safeAreaInsetBottom,\n                safeAreaInsetLeft: safeAreaInsetLeft,\n                onGestureStart: onGestureStart,\n                onGestureCancel: onGestureCancel,\n                onGestureEnd: onGestureEnd,\n                headerHeight: headerHeight,\n                isParentHeaderShown: isParentHeaderShown,\n                onHeaderHeightChange: this.handleHeaderLayout,\n                getPreviousScene: this.getPreviousScene,\n                getFocusedRoute: this.getFocusedRoute,\n                hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n                renderHeader: renderHeader,\n                onOpenRoute: onOpenRoute,\n                onCloseRoute: onCloseRoute,\n                onTransitionStart: onTransitionStart,\n                onTransitionEnd: onTransitionEnd,\n                isNextScreenTransparent: isNextScreenTransparent,\n                detachCurrentScreen: detachCurrentScreen,\n                preloaded: isPreloaded\n              })\n            }, route.key);\n          })\n        }), isFloatHeaderAbsolute ? floatingHeader : null]\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      const gestures = [...props.routes, ...props.state.preloadedRoutes].reduce((acc, curr) => {\n        const descriptor = props.descriptors[curr.key] || props.preloadedDescriptors[curr.key];\n        const {\n          animation\n        } = descriptor?.options || {};\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animation !== 'none' || props.state.preloadedRoutes.includes(curr) ? getDistanceFromOptions(state.layout, descriptor, props.direction === 'rtl') : 0);\n        return acc;\n      }, {});\n      const modalRouteKeys = getModalRouteKeys([...props.routes, ...props.state.preloadedRoutes], {\n        ...props.descriptors,\n        ...props.preloadedDescriptors\n      });\n      const scenes = [...props.routes, ...props.state.preloadedRoutes].map((route, index, self) => {\n        // For preloaded screens, we don't care about the previous and the next screen\n        const isPreloaded = props.state.preloadedRoutes.includes(route);\n        const previousRoute = isPreloaded ? undefined : self[index - 1];\n        const nextRoute = isPreloaded ? undefined : self[index + 1];\n        const oldScene = state.scenes[index];\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        const descriptor = (isPreloaded ? props.preloadedDescriptors : props.descriptors)[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        const nextDescriptor = nextRoute && (props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key]);\n        const previousDescriptor = previousRoute && (props.descriptors[previousRoute?.key] || state.descriptors[previousRoute?.key]);\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but the majority of the transitions look alright\n        const optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n\n        // Assume modal if there are already modal screens in the stack\n        // or current screen is a modal when no presentation is specified\n        const isModal = modalRouteKeys.includes(route.key);\n\n        // Disable screen transition animation by default on web, windows and macos to match the native behavior\n        const excludedPlatforms = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos';\n        const animation = optionsForTransitionConfig.animation ?? (excludedPlatforms ? 'default' : 'none');\n        const isAnimationEnabled = animation !== 'none';\n        const transitionPreset = animation !== 'default' ? NAMED_TRANSITIONS_PRESETS[animation] : isModal || optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        const {\n          gestureEnabled = Platform.OS === 'ios' && isAnimationEnabled,\n          gestureDirection = transitionPreset.gestureDirection,\n          transitionSpec = transitionPreset.transitionSpec,\n          cardStyleInterpolator = isAnimationEnabled ? transitionPreset.cardStyleInterpolator : forNoAnimationCard,\n          headerStyleInterpolator = transitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)\n        } = optionsForTransitionConfig;\n        const headerMode = descriptor.options.headerMode ?? (!(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || nextDescriptor?.options.presentation === 'modal' || nextDescriptor?.options.presentation === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen');\n        const isRTL = props.direction === 'rtl';\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animation,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode\n            }\n          },\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor, isRTL),\n            next: nextGesture && nextDescriptor?.options.presentation !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor, isRTL) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor, isRTL) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes,\n        gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n}(React.Component);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","React","Animated","Platform","StyleSheet","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","BottomSheetAndroid","DefaultTransition","FadeFromBottomAndroid","FadeFromRightAndroid","ModalFadeTransition","ModalSlideFromBottomIOS","ModalTransition","RevealFromBottomAndroid","ScaleFromCenterAndroid","SlideFromLeftIOS","SlideFromRightIOS","findLastIndex","getDistanceForDirection","getModalRouteKeys","MaybeScreen","MaybeScreenContainer","CardContainer","jsx","_jsx","jsxs","_jsxs","NAMED_TRANSITIONS_PRESETS","default","fade","fade_from_bottom","fade_from_right","none","reveal_from_bottom","scale_from_center","slide_from_left","slide_from_right","slide_from_bottom","select","ios","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","getIsModalPresentation","name","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","isRTL","gestureDirection","defaultGestureDirection","presentation","animation","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_props","_this","_classCallCheck","_callSuper","_defineProperty","e","nativeEvent","setState","state","props","headerHeights","_ref","_ref2","previousHeight","routes","_ref3","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","initialMetrics","frame","descriptors","_inherits","_createClass","value","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","OS","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerMode","headerTransparent","headerShown","activeScreensLimit","length","detachPreviousScreen","floatingHeader","Fragment","children","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","enabled","container","onLayout","handleLayout","preloadedRoutes","map","focused","isPreloaded","includes","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","freezeOnBlur","autoHideHomeIndicator","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","homeIndicatorHidden","pointerEvents","modal","closing","onHeaderHeightChange","hasAbsoluteFloatHeader","preloaded","getDerivedStateFromProps","preloadedDescriptors","Value","openingRouteKeys","direction","modalRouteKeys","self","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","excludedPlatforms","isAnimationEnabled","transitionPreset","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","header","next","__memo","every","it","Component","create","flex","position","start","end","zIndex"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  LocaleDirection,\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  type LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  BottomSheetAndroid,\n  DefaultTransition,\n  FadeFromBottomAndroid,\n  FadeFromRightAndroid,\n  ModalFadeTransition,\n  ModalSlideFromBottomIOS,\n  ModalTransition,\n  RevealFromBottomAndroid,\n  ScaleFromCenterAndroid,\n  SlideFromLeftIOS,\n  SlideFromRightIOS,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackAnimationName,\n  StackCardStyleInterpolator,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\nimport { findLastIndex } from '../../utils/findLastIndex';\nimport { getDistanceForDirection } from '../../utils/getDistanceForDirection';\nimport { getModalRouteKeys } from '../../utils/getModalRoutesKeys';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { CardContainer } from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  direction: LocaleDirection;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  preloadedDescriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst NAMED_TRANSITIONS_PRESETS = {\n  default: DefaultTransition,\n  fade: ModalFadeTransition,\n  fade_from_bottom: FadeFromBottomAndroid,\n  fade_from_right: FadeFromRightAndroid,\n  none: DefaultTransition,\n  reveal_from_bottom: RevealFromBottomAndroid,\n  scale_from_center: ScaleFromCenterAndroid,\n  slide_from_left: SlideFromLeftIOS,\n  slide_from_right: SlideFromRightIOS,\n  slide_from_bottom: Platform.select({\n    ios: ModalSlideFromBottomIOS,\n    default: BottomSheetAndroid,\n  }),\n} as const satisfies Record<StackAnimationName, TransitionPreset>;\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  if (descriptor?.options.gestureDirection) {\n    return getDistanceForDirection(\n      layout,\n      descriptor?.options.gestureDirection,\n      isRTL\n    );\n  }\n\n  const defaultGestureDirection =\n    descriptor?.options.presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection;\n\n  const gestureDirection = descriptor?.options.animation\n    ? NAMED_TRANSITIONS_PRESETS[descriptor?.options.animation]?.gestureDirection\n    : defaultGestureDirection;\n\n  return getDistanceForDirection(layout, gestureDirection, isRTL);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor,\n    isRTL\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = [\n      ...props.routes,\n      ...props.state.preloadedRoutes,\n    ].reduce<GestureValues>((acc, curr) => {\n      const descriptor =\n        props.descriptors[curr.key] || props.preloadedDescriptors[curr.key];\n      const { animation } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          (props.openingRouteKeys.includes(curr.key) && animation !== 'none') ||\n          props.state.preloadedRoutes.includes(curr)\n            ? getDistanceFromOptions(\n                state.layout,\n                descriptor,\n                props.direction === 'rtl'\n              )\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const modalRouteKeys = getModalRouteKeys(\n      [...props.routes, ...props.state.preloadedRoutes],\n      {\n        ...props.descriptors,\n        ...props.preloadedDescriptors,\n      }\n    );\n\n    const scenes = [...props.routes, ...props.state.preloadedRoutes].map(\n      (route, index, self) => {\n        // For preloaded screens, we don't care about the previous and the next screen\n        const isPreloaded = props.state.preloadedRoutes.includes(route);\n        const previousRoute = isPreloaded ? undefined : self[index - 1];\n        const nextRoute = isPreloaded ? undefined : self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          (isPreloaded ? props.preloadedDescriptors : props.descriptors)[\n            route.key\n          ] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          nextRoute &&\n          (props.descriptors[nextRoute?.key] ||\n            state.descriptors[nextRoute?.key]);\n\n        const previousDescriptor =\n          previousRoute &&\n          (props.descriptors[previousRoute?.key] ||\n            state.descriptors[previousRoute?.key]);\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but the majority of the transitions look alright\n        const optionsForTransitionConfig =\n          index !== self.length - 1 &&\n          nextDescriptor &&\n          nextDescriptor.options.presentation !== 'transparentModal'\n            ? nextDescriptor.options\n            : descriptor.options;\n\n        // Assume modal if there are already modal screens in the stack\n        // or current screen is a modal when no presentation is specified\n        const isModal = modalRouteKeys.includes(route.key);\n\n        // Disable screen transition animation by default on web, windows and macos to match the native behavior\n        const excludedPlatforms =\n          Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos';\n\n        const animation =\n          optionsForTransitionConfig.animation ??\n          (excludedPlatforms ? 'default' : 'none');\n        const isAnimationEnabled = animation !== 'none';\n\n        const transitionPreset =\n          animation !== 'default'\n            ? NAMED_TRANSITIONS_PRESETS[animation]\n            : isModal || optionsForTransitionConfig.presentation === 'modal'\n              ? ModalTransition\n              : optionsForTransitionConfig.presentation === 'transparentModal'\n                ? ModalFadeTransition\n                : DefaultTransition;\n\n        const {\n          gestureEnabled = Platform.OS === 'ios' && isAnimationEnabled,\n          gestureDirection = transitionPreset.gestureDirection,\n          transitionSpec = transitionPreset.transitionSpec,\n          cardStyleInterpolator = isAnimationEnabled\n            ? transitionPreset.cardStyleInterpolator\n            : forNoAnimationCard,\n          headerStyleInterpolator = transitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = (Platform.OS !== 'ios' &&\n            optionsForTransitionConfig.presentation !== 'transparentModal') ||\n            getIsModalPresentation(cardStyleInterpolator),\n        } = optionsForTransitionConfig;\n\n        const headerMode: StackHeaderMode =\n          descriptor.options.headerMode ??\n          (!(\n            optionsForTransitionConfig.presentation === 'modal' ||\n            optionsForTransitionConfig.presentation === 'transparentModal' ||\n            nextDescriptor?.options.presentation === 'modal' ||\n            nextDescriptor?.options.presentation === 'transparentModal' ||\n            getIsModalPresentation(cardStyleInterpolator)\n          ) &&\n          Platform.OS === 'ios' &&\n          descriptor.options.header === undefined\n            ? 'float'\n            : 'screen');\n\n        const isRTL = props.direction === 'rtl';\n\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animation,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode,\n            },\n          },\n          progress: {\n            current: getProgressFromGesture(\n              currentGesture,\n              state.layout,\n              descriptor,\n              isRTL\n            ),\n            next:\n              nextGesture &&\n              nextDescriptor?.options.presentation !== 'transparentModal'\n                ? getProgressFromGesture(\n                    nextGesture,\n                    state.layout,\n                    nextDescriptor,\n                    isRTL\n                  )\n                : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor,\n                  isRTL\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }\n    );\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n            ? i !==\n              findLastIndex(scenes, (scene) => {\n                const { cardStyleInterpolator } = scene.descriptor.options;\n\n                return (\n                  cardStyleInterpolator === forModalPresentationIOS ||\n                  cardStyleInterpolator?.name === 'forModalPresentationIOS'\n                );\n              })\n            : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {[...routes, ...state.preloadedRoutes].map((route, index) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n            // It is possible that for a short period the route appears in both arrays.\n            // Particularly, if the screen is removed with `retain`, then it needs a moment to execute the animation.\n            // However, due to the router action, it immediately populates the `preloadedRoutes` array.\n            // Practically, the logic below takes care that it is rendered only once.\n            const isPreloaded =\n              state.preloadedRoutes.includes(route) && !routes.includes(route);\n            if (\n              state.preloadedRoutes.includes(route) &&\n              routes.includes(route) &&\n              index >= routes.length\n            ) {\n              return null;\n            }\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive:\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\n              | 0\n              | 1\n              | 2 = 1;\n\n            if (index < routes.length - activeScreensLimit - 1 || isPreloaded) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[routes.length - 1];\n              const outputValue =\n                index === routes.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= routes.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              freezeOnBlur,\n              autoHideHomeIndicator,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={[StyleSheet.absoluteFill]}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                homeIndicatorHidden={autoHideHomeIndicator}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === routes.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                  preloaded={isPreloaded}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}