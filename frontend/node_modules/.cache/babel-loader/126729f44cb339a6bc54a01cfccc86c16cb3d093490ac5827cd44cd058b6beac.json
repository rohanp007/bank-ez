{"ast":null,"code":"import React,{useState}from'react';import{View,TextInput,Button,Text,StyleSheet}from'react-native';import{depositFunds}from'../utils/api';// Import the depositFunds function\nimport AsyncStorage from'@react-native-async-storage/async-storage';// Import to get account UUID\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function DepositForm(){const[accountId,setAccountId]=useState('');const[amount,setAmount]=useState('');const[message,setMessage]=useState('');const[balance,setBalance]=useState('');// Fetch account ID from storage once the component is loaded\nReact.useEffect(()=>{async function fetchAccountId(){try{const storedAccountId=await AsyncStorage.getItem('accountUuid');if(storedAccountId){setAccountId(storedAccountId);// Automatically set the accountId\n}}catch(error){console.error('Error fetching account UUID:',error);}}fetchAccountId();},[]);const handleDeposit=async()=>{// Clear any previous messages\nsetMessage('');// Input validation\nif(!amount||isNaN(amount)||amount<=0){setMessage('Please enter a valid amount greater than 0.');return;}try{// Send deposit request to the backend\nconst data=await depositFunds(accountId,parseFloat(amount));setMessage(`Deposit successful! New Balance: $${data.newBalance}`);setBalance(data.newBalance);// Update the balance state after successful deposit\n}catch(err){setMessage('Deposit failed. Please check the account ID or try again.');}};return/*#__PURE__*/_jsxs(View,{style:styles.container,children:[/*#__PURE__*/_jsx(Text,{style:styles.title,children:\"Make a Deposit\"}),/*#__PURE__*/_jsx(Text,{style:styles.label,children:\"Account ID\"}),/*#__PURE__*/_jsx(TextInput,{placeholder:\"Account ID\",value:accountId,onChangeText:setAccountId,style:styles.input,editable:false// Account ID is set automatically and is not editable\n}),/*#__PURE__*/_jsx(Text,{style:styles.label,children:\"Deposit Amount\"}),/*#__PURE__*/_jsx(TextInput,{placeholder:\"Amount\",value:amount,onChangeText:setAmount,keyboardType:\"numeric\",style:styles.input}),/*#__PURE__*/_jsx(Button,{title:\"Deposit\",onPress:handleDeposit}),message?/*#__PURE__*/_jsx(Text,{style:styles.message,children:message}):null,balance?/*#__PURE__*/_jsxs(Text,{style:styles.balance,children:[\"New Balance: $\",balance]}):null]});}const styles=StyleSheet.create({container:{padding:20,flex:1,justifyContent:'center'},title:{fontSize:24,marginBottom:20,textAlign:'center'},label:{fontWeight:'bold',marginBottom:5},input:{borderBottomWidth:1,marginBottom:20,padding:10},message:{marginTop:10,color:'green'},balance:{marginTop:10,fontSize:18,color:'blue'}});","map":{"version":3,"names":["React","useState","View","TextInput","Button","Text","StyleSheet","depositFunds","AsyncStorage","jsx","_jsx","jsxs","_jsxs","DepositForm","accountId","setAccountId","amount","setAmount","message","setMessage","balance","setBalance","useEffect","fetchAccountId","storedAccountId","getItem","error","console","handleDeposit","isNaN","data","parseFloat","newBalance","err","style","styles","container","children","title","label","placeholder","value","onChangeText","input","editable","keyboardType","onPress","create","padding","flex","justifyContent","fontSize","marginBottom","textAlign","fontWeight","borderBottomWidth","marginTop","color"],"sources":["C:/Users/rohan_gs/bank-ez/frontend/src/screens/DepositForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, TextInput, Button, Text, StyleSheet } from 'react-native';\r\nimport { depositFunds } from '../utils/api'; // Import the depositFunds function\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'; // Import to get account UUID\r\n\r\nexport default function DepositForm() {\r\n  const [accountId, setAccountId] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [balance, setBalance] = useState('');\r\n\r\n  // Fetch account ID from storage once the component is loaded\r\n  React.useEffect(() => {\r\n    async function fetchAccountId() {\r\n      try {\r\n        const storedAccountId = await AsyncStorage.getItem('accountUuid');\r\n        if (storedAccountId) {\r\n          setAccountId(storedAccountId); // Automatically set the accountId\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching account UUID:', error);\r\n      }\r\n    }\r\n\r\n    fetchAccountId();\r\n  }, []);\r\n\r\n  const handleDeposit = async () => {\r\n    // Clear any previous messages\r\n    setMessage('');\r\n\r\n    // Input validation\r\n    if (!amount || isNaN(amount) || amount <= 0) {\r\n      setMessage('Please enter a valid amount greater than 0.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Send deposit request to the backend\r\n      const data = await depositFunds(accountId, parseFloat(amount));\r\n      setMessage(`Deposit successful! New Balance: $${data.newBalance}`);\r\n      setBalance(data.newBalance); // Update the balance state after successful deposit\r\n    } catch (err) {\r\n      setMessage('Deposit failed. Please check the account ID or try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Make a Deposit</Text>\r\n      <Text style={styles.label}>Account ID</Text>\r\n      <TextInput\r\n        placeholder=\"Account ID\"\r\n        value={accountId}\r\n        onChangeText={setAccountId}\r\n        style={styles.input}\r\n        editable={false} // Account ID is set automatically and is not editable\r\n      />\r\n      <Text style={styles.label}>Deposit Amount</Text>\r\n      <TextInput\r\n        placeholder=\"Amount\"\r\n        value={amount}\r\n        onChangeText={setAmount}\r\n        keyboardType=\"numeric\"\r\n        style={styles.input}\r\n      />\r\n      <Button title=\"Deposit\" onPress={handleDeposit} />\r\n      {message ? <Text style={styles.message}>{message}</Text> : null}\r\n      {balance ? <Text style={styles.balance}>New Balance: ${balance}</Text> : null}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 20,\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    marginBottom: 20,\r\n    textAlign: 'center',\r\n  },\r\n  label: {\r\n    fontWeight: 'bold',\r\n    marginBottom: 5,\r\n  },\r\n  input: {\r\n    borderBottomWidth: 1,\r\n    marginBottom: 20,\r\n    padding: 10,\r\n  },\r\n  message: {\r\n    marginTop: 10,\r\n    color: 'green',\r\n  },\r\n  balance: {\r\n    marginTop: 10,\r\n    fontSize: 18,\r\n    color: 'blue',\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}