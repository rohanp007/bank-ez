{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport { Dimensions, Platform, StyleSheet, View } from 'react-native';\nimport { initialWindowMetrics, SafeAreaFrameContext, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width,\n    height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport function SafeAreaProviderCompat(_ref) {\n  let {\n    children,\n    style\n  } = _ref;\n  const insets = React.useContext(SafeAreaInsetsContext);\n  if (insets) {\n    // If we already have insets, don't wrap the stack in another safe area provider\n    // This avoids an issue with updates at the cost of potentially incorrect values\n    // https://github.com/react-navigation/react-navigation/issues/174\n    return /*#__PURE__*/_jsx(View, {\n      style: [styles.container, style],\n      children: children\n    });\n  }\n  if (Platform.OS === 'web') {\n    children = /*#__PURE__*/_jsx(SafeAreaFrameProvider, {\n      initialMetrics: initialMetrics,\n      children: children\n    });\n  }\n  return /*#__PURE__*/_jsx(SafeAreaProvider, {\n    initialMetrics: initialMetrics,\n    style: style,\n    children: children\n  });\n}\n\n// FIXME: On the Web, the safe area frame value doesn't update on resize\n// So we workaround this by measuring the frame on resize\nconst SafeAreaFrameProvider = _ref2 => {\n  let {\n    initialMetrics,\n    children\n  } = _ref2;\n  const element = React.useRef(null);\n  const [frame, setFrame] = React.useState(initialMetrics.frame);\n  React.useEffect(() => {\n    if (element.current == null) {\n      return;\n    }\n    const rect = element.current.getBoundingClientRect();\n\n    // eslint-disable-next-line @eslint-react/hooks-extra/no-direct-set-state-in-use-effect\n    setFrame({\n      x: rect.x,\n      y: rect.y,\n      width: rect.width,\n      height: rect.height\n    });\n    let timeout;\n    const observer = new ResizeObserver(entries => {\n      const entry = entries[0];\n      if (entry) {\n        const {\n          x,\n          y,\n          width,\n          height\n        } = entry.contentRect;\n\n        // Debounce the frame updates to avoid too many updates in a short time\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n          setFrame({\n            x,\n            y,\n            width,\n            height\n          });\n        }, 100);\n      }\n    });\n    observer.observe(element.current);\n    return () => {\n      observer.disconnect();\n      clearTimeout(timeout);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(SafeAreaFrameContext.Provider, {\n    value: frame,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      ref: element,\n      style: {\n        ...StyleSheet.absoluteFillObject,\n        pointerEvents: 'none',\n        visibility: 'hidden'\n      }\n    }), children]\n  });\n};\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","Dimensions","Platform","StyleSheet","View","initialWindowMetrics","SafeAreaFrameContext","SafeAreaInsetsContext","SafeAreaProvider","jsx","_jsx","jsxs","_jsxs","width","height","get","initialMetrics","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","_ref","children","style","useContext","styles","container","SafeAreaFrameProvider","_ref2","element","useRef","setFrame","useState","useEffect","current","rect","getBoundingClientRect","timeout","observer","ResizeObserver","entries","entry","contentRect","clearTimeout","setTimeout","observe","disconnect","Provider","value","ref","absoluteFillObject","pointerEvents","visibility","create","flex"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\elements\\src\\SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  Platform,\n  type StyleProp,\n  StyleSheet,\n  View,\n  type ViewStyle,\n} from 'react-native';\nimport {\n  initialWindowMetrics,\n  type Metrics,\n  SafeAreaFrameContext,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\ntype Props = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport function SafeAreaProviderCompat({ children, style }: Props) {\n  const insets = React.useContext(SafeAreaInsetsContext);\n\n  if (insets) {\n    // If we already have insets, don't wrap the stack in another safe area provider\n    // This avoids an issue with updates at the cost of potentially incorrect values\n    // https://github.com/react-navigation/react-navigation/issues/174\n    return <View style={[styles.container, style]}>{children}</View>;\n  }\n\n  if (Platform.OS === 'web') {\n    children = (\n      <SafeAreaFrameProvider initialMetrics={initialMetrics}>\n        {children}\n      </SafeAreaFrameProvider>\n    );\n  }\n\n  return (\n    <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\n      {children}\n    </SafeAreaProvider>\n  );\n}\n\n// FIXME: On the Web, the safe area frame value doesn't update on resize\n// So we workaround this by measuring the frame on resize\nconst SafeAreaFrameProvider = ({\n  initialMetrics,\n  children,\n}: {\n  initialMetrics: Metrics;\n  children: React.ReactNode;\n}) => {\n  const element = React.useRef<HTMLDivElement>(null);\n  const [frame, setFrame] = React.useState(initialMetrics.frame);\n\n  React.useEffect(() => {\n    if (element.current == null) {\n      return;\n    }\n\n    const rect = element.current.getBoundingClientRect();\n\n    // eslint-disable-next-line @eslint-react/hooks-extra/no-direct-set-state-in-use-effect\n    setFrame({\n      x: rect.x,\n      y: rect.y,\n      width: rect.width,\n      height: rect.height,\n    });\n\n    let timeout: ReturnType<typeof setTimeout>;\n\n    const observer = new ResizeObserver((entries) => {\n      const entry = entries[0];\n\n      if (entry) {\n        const { x, y, width, height } = entry.contentRect;\n\n        // Debounce the frame updates to avoid too many updates in a short time\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n          setFrame({ x, y, width, height });\n        }, 100);\n      }\n    });\n\n    observer.observe(element.current);\n\n    return () => {\n      observer.disconnect();\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  return (\n    <SafeAreaFrameContext.Provider value={frame}>\n      <div\n        ref={element}\n        style={{\n          ...StyleSheet.absoluteFillObject,\n          pointerEvents: 'none',\n          visibility: 'hidden',\n        }}\n      />\n      {children}\n    </SafeAreaFrameContext.Provider>\n  );\n};\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}