{"ast":null,"code":"\"use strict\";\n\nimport { useTheme } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform, Text } from 'react-native';\nimport { useLinkProps } from \"./useLinkProps.js\";\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport function Link(_ref) {\n  let {\n    screen,\n    params,\n    action,\n    href,\n    style,\n    ...rest\n  } = _ref;\n  const {\n    colors,\n    fonts\n  } = useTheme();\n  // @ts-expect-error: This is already type-checked by the prop types\n  const props = useLinkProps({\n    screen,\n    params,\n    action,\n    href\n  });\n  const onPress = e => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    // Let user prevent default behavior\n    if (!e.defaultPrevented) {\n      props.onPress(e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: {\n        onClick: onPress\n      },\n      default: {\n        onPress\n      }\n    }),\n    style: [{\n      color: colors.primary\n    }, fonts.regular, style]\n  });\n}","map":{"version":3,"names":["useTheme","React","Platform","Text","useLinkProps","Link","_ref","screen","params","action","href","style","rest","colors","fonts","props","onPress","e","defaultPrevented","createElement","select","web","onClick","default","color","primary","regular"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\native\\src\\Link.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/core';\nimport * as React from 'react';\nimport {\n  type GestureResponderEvent,\n  Platform,\n  Text,\n  type TextProps,\n} from 'react-native';\n\nimport { type LinkProps, useLinkProps } from './useLinkProps';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> =\n  LinkProps<ParamList> &\n    Omit<TextProps, 'disabled'> & {\n      target?: string;\n      onPress?: (\n        e:\n          | React.MouseEvent<HTMLAnchorElement, MouseEvent>\n          | GestureResponderEvent\n      ) => void;\n      disabled?: boolean | null;\n      children: React.ReactNode;\n    };\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.screen Name of the screen to navigate to (e.g. `'Feeds'`).\n * @param props.params Params to pass to the screen to navigate to (e.g. `{ sort: 'hot' }`).\n * @param props.href Optional absolute path to use for the href (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport function Link<ParamList extends ReactNavigation.RootParamList>({\n  screen,\n  params,\n  action,\n  href,\n  style,\n  ...rest\n}: Props<ParamList>) {\n  const { colors, fonts } = useTheme();\n  // @ts-expect-error: This is already type-checked by the prop types\n  const props = useLinkProps<ParamList>({ screen, params, action, href });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    // Let user prevent default behavior\n    if (!e.defaultPrevented) {\n      props.onPress(e);\n    }\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n    style: [{ color: colors.primary }, fonts.regular, style],\n  });\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,wBAAwB;AACjD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAEEC,QAAQ,EACRC,IAAI,QAEC,cAAc;AAErB,SAAyBC,YAAY,QAAQ,mBAAgB;AAe7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAAAC,IAAA,EAOC;EAAA,IAPiD;IACpEC,MAAM;IACNC,MAAM;IACNC,MAAM;IACNC,IAAI;IACJC,KAAK;IACL,GAAGC;EACa,CAAC,GAAAN,IAAA;EACjB,MAAM;IAAEO,MAAM;IAAEC;EAAM,CAAC,GAAGd,QAAQ,CAAC,CAAC;EACpC;EACA,MAAMe,KAAK,GAAGX,YAAY,CAAY;IAAEG,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,CAAC;EAEvE,MAAMM,OAAO,GACXC,CAA0E,IACvE;IACH,IAAI,SAAS,IAAIL,IAAI,EAAE;MACrBA,IAAI,CAACI,OAAO,GAAGC,CAAC,CAAC;IACnB;;IAEA;IACA,IAAI,CAACA,CAAC,CAACC,gBAAgB,EAAE;MACvBH,KAAK,CAACC,OAAO,CAACC,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBAAOhB,KAAK,CAACkB,aAAa,CAAChB,IAAI,EAAE;IAC/B,GAAGY,KAAK;IACR,GAAGH,IAAI;IACP,GAAGV,QAAQ,CAACkB,MAAM,CAAC;MACjBC,GAAG,EAAE;QAAEC,OAAO,EAAEN;MAAQ,CAAQ;MAChCO,OAAO,EAAE;QAAEP;MAAQ;IACrB,CAAC,CAAC;IACFL,KAAK,EAAE,CAAC;MAAEa,KAAK,EAAEX,MAAM,CAACY;IAAQ,CAAC,EAAEX,KAAK,CAACY,OAAO,EAAEf,KAAK;EACzD,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}