{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { CommonActions, StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport { ModalPresentationContext } from \"../../utils/ModalPresentationContext.js\";\nimport { GestureHandlerRootView } from '../GestureHandler.js';\nimport { HeaderContainer } from \"../Header/HeaderContainer.js\";\nimport { CardStack } from \"./CardStack.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);\nexport let StackView = /*#__PURE__*/function (_React$Component) {\n  function StackView() {\n    var _this;\n    _classCallCheck(this, StackView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, StackView, [...args]);\n    _defineProperty(_this, \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(_this, \"getPreviousRoute\", _ref => {\n      let {\n        route\n      } = _ref;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = _this.state;\n      const routes = _this.state.routes.filter(r => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));\n      const index = routes.findIndex(r => r.key === route.key);\n      return routes[index - 1];\n    });\n    _defineProperty(_this, \"renderHeader\", props => {\n      return /*#__PURE__*/_jsx(HeaderContainer, {\n        ...props\n      });\n    });\n    _defineProperty(_this, \"handleOpenRoute\", _ref2 => {\n      let {\n        route\n      } = _ref2;\n      const {\n        state,\n        navigation\n      } = _this.props;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = _this.state;\n      if (closingRouteKeys.some(key => key === route.key) && replacingRouteKeys.every(key => key !== route.key) && state.routeNames.includes(route.name) && !state.routes.some(r => r.key === route.key)) {\n        // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n        // So we need to add this route back to the state\n        navigation.dispatch(state => {\n          const routes = [...state.routes.filter(r => r.key !== route.key), route];\n          return CommonActions.reset({\n            ...state,\n            routes,\n            index: routes.length - 1\n          });\n        });\n      } else {\n        _this.setState(state => ({\n          routes: state.replacingRouteKeys.length ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key)) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n          replacingRouteKeys: []\n        }));\n      }\n    });\n    _defineProperty(_this, \"handleCloseRoute\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const {\n        state,\n        navigation\n      } = _this.props;\n      if (state.routes.some(r => r.key === route.key)) {\n        // If a route exists in state, trigger a pop\n        // This will happen in when the route was closed from the card component\n        // e.g. When the close animation triggered from a gesture ends\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: route.key,\n          target: state.key\n        });\n      } else {\n        // We need to clean up any state tracking the route and pop it immediately\n        _this.setState(state => ({\n          routes: state.routes.filter(r => r.key !== route.key),\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key)\n        }));\n      }\n    });\n    _defineProperty(_this, \"handleTransitionStart\", (_ref4, closing) => {\n      let {\n        route\n      } = _ref4;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(_this, \"handleTransitionEnd\", (_ref5, closing) => {\n      let {\n        route\n      } = _ref5;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(_this, \"handleGestureStart\", _ref6 => {\n      let {\n        route\n      } = _ref6;\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n    _defineProperty(_this, \"handleGestureEnd\", _ref7 => {\n      let {\n        route\n      } = _ref7;\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n    _defineProperty(_this, \"handleGestureCancel\", _ref8 => {\n      let {\n        route\n      } = _ref8;\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n    return _this;\n  }\n  _inherits(StackView, _React$Component);\n  return _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      const {\n        state,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        descriptors: _,\n        ...rest\n      } = this.props;\n      const {\n        routes,\n        descriptors,\n        openingRouteKeys,\n        closingRouteKeys\n      } = this.state;\n      const preloadedDescriptors = state.preloadedRoutes.reduce((acc, route) => {\n        acc[route.key] = acc[route.key] || this.props.describe(route, true);\n        return acc;\n      }, {});\n      return /*#__PURE__*/_jsx(GestureHandlerWrapper, {\n        style: styles.container,\n        children: /*#__PURE__*/_jsx(SafeAreaProviderCompat, {\n          children: /*#__PURE__*/_jsx(SafeAreaInsetsContext.Consumer, {\n            children: insets => /*#__PURE__*/_jsx(ModalPresentationContext.Consumer, {\n              children: isParentModal => /*#__PURE__*/_jsx(HeaderShownContext.Consumer, {\n                children: isParentHeaderShown => /*#__PURE__*/_jsx(CardStack, {\n                  insets: insets,\n                  isParentHeaderShown: isParentHeaderShown,\n                  isParentModal: isParentModal,\n                  getPreviousRoute: this.getPreviousRoute,\n                  routes: routes,\n                  openingRouteKeys: openingRouteKeys,\n                  closingRouteKeys: closingRouteKeys,\n                  onOpenRoute: this.handleOpenRoute,\n                  onCloseRoute: this.handleCloseRoute,\n                  onTransitionStart: this.handleTransitionStart,\n                  onTransitionEnd: this.handleTransitionEnd,\n                  renderHeader: this.renderHeader,\n                  state: state,\n                  descriptors: descriptors,\n                  onGestureStart: this.handleGestureStart,\n                  onGestureEnd: this.handleGestureEnd,\n                  onGestureCancel: this.handleGestureCancel,\n                  preloadedDescriptors: preloadedDescriptors,\n                  ...rest\n                })\n              })\n            })\n          })\n        })\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      // If there was no change in routes, we don't need to compute anything\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(r => r.key), state.previousRoutes.map(r => r.key))) && state.routes.length) {\n        let routes = state.routes;\n        let previousRoutes = state.previousRoutes;\n        let descriptors = props.descriptors;\n        let previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          descriptors = state.routes.reduce((acc, route) => {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          // if any route objects have changed, we should update them\n          const map = props.state.routes.reduce((acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          routes = state.routes.map(route => map[route.key] || route);\n          previousRoutes = props.state.routes;\n        }\n        return {\n          routes,\n          previousRoutes,\n          descriptors,\n          previousDescriptors\n        };\n      }\n\n      // Here we determine which routes were added or removed to animate them\n      // We keep a copy of the route being removed in local state to be able to animate it\n\n      let routes = props.state.index < props.state.routes.length - 1 ?\n      // Remove any extra routes from the state\n      // The last visible route should be the focused route, i.e. at current index\n      props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n\n      // Now we need to determine which routes were added and removed\n      const {\n        previousRoutes\n      } = state;\n      let {\n        openingRouteKeys,\n        closingRouteKeys,\n        replacingRouteKeys\n      } = state;\n      const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      const nextFocusedRoute = routes[routes.length - 1];\n      const isAnimationEnabled = key => {\n        const descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animation !== 'none' : true;\n      };\n      const getAnimationTypeForReplace = key => {\n        const descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor.options.animationTypeForReplace ?? 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        // We only need to animate routes if the focused route changed\n        // Animating previous routes won't be visible coz the focused route is on top of everything\n\n        if (!previousRoutes.some(r => r.key === nextFocusedRoute.key)) {\n          // A new route has come to the focus, we treat this as a push\n          // A replace can also trigger this, the animation should look like push\n\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            // In this case, we need to animate pushing the focused route\n            // We don't care about animating any other added routes because they won't be visible\n            openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n            closingRouteKeys = closingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n            replacingRouteKeys = replacingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n            if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n              // The previous focused route isn't present in state, we treat this as a replace\n\n              openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n                // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n                // But since user configured it to animate the old screen like a pop, we need to add this without animation\n                // So remove it from `openingRouteKeys` which will remove the animation\n                openingRouteKeys = openingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n\n                // Keep the route being removed at the end to animate it out\n                routes = [...routes, previousFocusedRoute];\n              } else {\n                replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];\n                closingRouteKeys = closingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n                // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n                // We need to insert it just before the focused one (the route being pushed)\n                // After the push animation is completed, routes being replaced will be removed completely\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n          // The previously focused route was removed, we treat this as a pop\n\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n            // Sometimes a route can be closed before the opening animation finishes\n            // So we also need to remove it from the opening list\n            openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n            replacingRouteKeys = replacingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n            // Keep a copy of route being removed in the state to be able to animate it\n            routes = [...routes, previousFocusedRoute];\n          }\n        } else {\n          // Looks like some routes were re-arranged and no focused routes were added/removed\n          // i.e. the currently focused route already existed and the previously focused route still exists\n          // We don't know how to animate this\n        }\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        // Keep the routes we are closing or replacing if animation is enabled for them\n        routes = routes.slice();\n        routes.splice(routes.length - 1, 0, ...state.routes.filter(_ref9 => {\n          let {\n            key\n          } = _ref9;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      const descriptors = routes.reduce((acc, route) => {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys,\n        closingRouteKeys,\n        replacingRouteKeys,\n        descriptors\n      };\n    }\n  }]);\n}(React.Component);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["HeaderShownContext","SafeAreaProviderCompat","CommonActions","StackActions","React","StyleSheet","View","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","jsx","_jsx","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","_React$Component","_this","_classCallCheck","_len","arguments","args","Array","_key","_callSuper","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","_ref","route","state","filter","r","key","includes","findIndex","props","_ref2","navigation","some","routeNames","name","dispatch","reset","setState","_ref3","pop","source","target","_ref4","closing","emit","type","data","_ref5","_ref6","_ref7","_ref8","_inherits","_createClass","value","render","_","rest","preloadedDescriptors","preloadedRoutes","reduce","acc","describe","style","styles","container","children","Consumer","insets","isParentModal","isParentHeaderShown","getPreviousRoute","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","onTransitionStart","handleTransitionStart","onTransitionEnd","handleTransitionEnd","renderHeader","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","getDerivedStateFromProps","map","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","options","animation","getAnimationTypeForReplace","animationTypeForReplace","splice","_ref9","Error","Component","create","flex"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  CommonActions,\n  type LocaleDirection,\n  type ParamListBase,\n  type Route,\n  type RouteProp,\n  StackActions,\n  type StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptor,\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport { ModalPresentationContext } from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport {\n  HeaderContainer,\n  type Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport { CardStack } from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  direction: LocaleDirection;\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  describe: (\n    route: RouteProp<ParamListBase>,\n    placeholder: boolean\n  ) => StackDescriptor;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    const { previousRoutes } = state;\n\n    let { openingRouteKeys, closingRouteKeys, replacingRouteKeys } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animation !== 'none' : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.dispatch((state) => {\n        const routes = [\n          ...state.routes.filter((r) => r.key !== route.key),\n          route,\n        ];\n\n        return CommonActions.reset({\n          ...state,\n          routes,\n          index: routes.length - 1,\n        });\n      });\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    const preloadedDescriptors =\n      state.preloadedRoutes.reduce<StackDescriptorMap>((acc, route) => {\n        acc[route.key] = acc[route.key] || this.props.describe(route, true);\n        return acc;\n      }, {});\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets!}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        preloadedDescriptors={preloadedDescriptors}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}