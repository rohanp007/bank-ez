{"ast":null,"code":"\"use strict\";\n\nimport { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from \"../../TransitionConfigs/HeaderStyleInterpolators.js\";\nimport { Header } from \"./Header.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function HeaderContainer(_ref) {\n  let {\n    mode,\n    scenes,\n    layout,\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange,\n    style\n  } = _ref;\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n  const {\n    buildHref\n  } = useLinkBuilder();\n  return /*#__PURE__*/_jsx(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style,\n    children: scenes.slice(-3).map((scene, i, self) => {\n      if (mode === 'screen' && i !== self.length - 1 || !scene) {\n        return null;\n      }\n      const {\n        header,\n        headerMode,\n        headerShown = true,\n        headerTransparent,\n        headerStyleInterpolator\n      } = scene.descriptor.options;\n      if (headerMode !== mode || !headerShown) {\n        return null;\n      }\n      const isFocused = focusedRoute.key === scene.descriptor.route.key;\n      const previousScene = getPreviousScene({\n        route: scene.descriptor.route\n      });\n      let headerBack = parentHeaderBack;\n      if (previousScene) {\n        const {\n          options,\n          route\n        } = previousScene.descriptor;\n        headerBack = previousScene ? {\n          title: getHeaderTitle(options, route.name),\n          href: buildHref(route.name, route.params)\n        } : parentHeaderBack;\n      }\n\n      // If the screen is next to a headerless screen, we need to make the header appear static\n      // This makes the header look like it's moving with the screen\n      const previousDescriptor = self[i - 1]?.descriptor;\n      const nextDescriptor = self[i + 1]?.descriptor;\n      const {\n        headerShown: previousHeaderShown = true,\n        headerMode: previousHeaderMode\n      } = previousDescriptor?.options || {};\n\n      // If any of the next screens don't have a header or header is part of the screen\n      // Then we need to move this header offscreen so that it doesn't cover it\n      const nextHeaderlessScene = self.slice(i + 1).find(scene => {\n        const {\n          headerShown: currentHeaderShown = true,\n          headerMode: currentHeaderMode\n        } = scene?.descriptor.options || {};\n        return currentHeaderShown === false || currentHeaderMode === 'screen';\n      });\n      const {\n        gestureDirection: nextHeaderlessGestureDirection\n      } = nextHeaderlessScene?.descriptor.options || {};\n      const isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') &&\n      // We still need to animate when coming back from next scene\n      // A hacky way to check this is if the next scene exists\n      !nextDescriptor || nextHeaderlessScene;\n      const props = {\n        layout,\n        back: headerBack,\n        progress: scene.progress,\n        options: scene.descriptor.options,\n        route: scene.descriptor.route,\n        navigation: scene.descriptor.navigation,\n        styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n      };\n      return /*#__PURE__*/_jsx(NavigationContext.Provider, {\n        value: scene.descriptor.navigation,\n        children: /*#__PURE__*/_jsx(NavigationRouteContext.Provider, {\n          value: scene.descriptor.route,\n          children: /*#__PURE__*/_jsx(View, {\n            onLayout: onContentHeightChange ? e => {\n              const {\n                height\n              } = e.nativeEvent.layout;\n              onContentHeightChange({\n                route: scene.descriptor.route,\n                height\n              });\n            } : undefined,\n            pointerEvents: isFocused ? 'box-none' : 'none',\n            accessibilityElementsHidden: !isFocused,\n            importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n            style:\n            // Avoid positioning the focused header absolutely\n            // Otherwise accessibility tools don't seem to be able to find it\n            mode === 'float' && !isFocused || headerTransparent ? styles.header : null,\n            children: header !== undefined ? header(props) : /*#__PURE__*/_jsx(Header, {\n              ...props\n            })\n          })\n        })\n      }, scene.descriptor.route.key);\n    })\n  });\n}\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0\n  }\n});","map":{"version":3,"names":["getHeaderTitle","HeaderBackContext","NavigationContext","NavigationRouteContext","useLinkBuilder","React","Animated","StyleSheet","View","forNoAnimation","forSlideLeft","forSlideRight","forSlideUp","Header","jsx","_jsx","HeaderContainer","_ref","mode","scenes","layout","getPreviousScene","getFocusedRoute","onContentHeightChange","style","focusedRoute","parentHeaderBack","useContext","buildHref","pointerEvents","children","slice","map","scene","i","self","length","header","headerMode","headerShown","headerTransparent","headerStyleInterpolator","descriptor","options","isFocused","key","route","previousScene","headerBack","title","name","href","params","previousDescriptor","nextDescriptor","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","find","currentHeaderShown","currentHeaderMode","gestureDirection","nextHeaderlessGestureDirection","isHeaderStatic","props","back","progress","navigation","styleInterpolator","Provider","value","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","create","position","top","start","end"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\stack\\src\\views\\Header\\HeaderContainer.tsx"],"sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  type ParamListBase,\n  type Route,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  type StyleProp,\n  StyleSheet,\n  View,\n  type ViewStyle,\n} from 'react-native';\n\nimport {\n  forNoAnimation,\n  forSlideLeft,\n  forSlideRight,\n  forSlideUp,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderMode,\n  StackHeaderProps,\n  StackNavigationProp,\n} from '../../types';\nimport { Header } from './Header';\n\nexport type Props = {\n  mode: StackHeaderMode;\n  layout: Layout;\n  scenes: (Scene | undefined)[];\n  getPreviousScene: (props: { route: Route<string> }) => Scene | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n};\n\nexport function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n  const { buildHref } = useLinkBuilder();\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const {\n          header,\n          headerMode,\n          headerShown = true,\n          headerTransparent,\n          headerStyleInterpolator,\n        } = scene.descriptor.options;\n\n        if (headerMode !== mode || !headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.descriptor.route.key;\n        const previousScene = getPreviousScene({\n          route: scene.descriptor.route,\n        });\n\n        let headerBack = parentHeaderBack;\n\n        if (previousScene) {\n          const { options, route } = previousScene.descriptor;\n\n          headerBack = previousScene\n            ? {\n                title: getHeaderTitle(options, route.name),\n                href: buildHref(route.name, route.params),\n              }\n            : parentHeaderBack;\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousDescriptor = self[i - 1]?.descriptor;\n        const nextDescriptor = self[i + 1]?.descriptor;\n\n        const {\n          headerShown: previousHeaderShown = true,\n          headerMode: previousHeaderMode,\n        } = previousDescriptor?.options || {};\n\n        // If any of the next screens don't have a header or header is part of the screen\n        // Then we need to move this header offscreen so that it doesn't cover it\n        const nextHeaderlessScene = self.slice(i + 1).find((scene) => {\n          const {\n            headerShown: currentHeaderShown = true,\n            headerMode: currentHeaderMode,\n          } = scene?.descriptor.options || {};\n\n          return currentHeaderShown === false || currentHeaderMode === 'screen';\n        });\n\n        const { gestureDirection: nextHeaderlessGestureDirection } =\n          nextHeaderlessScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          ((previousHeaderShown === false || previousHeaderMode === 'screen') &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextDescriptor) ||\n          nextHeaderlessScene;\n\n        const props: StackHeaderProps = {\n          layout,\n          back: headerBack,\n          progress: scene.progress,\n          options: scene.descriptor.options,\n          route: scene.descriptor.route,\n          navigation: scene.descriptor\n            .navigation as StackNavigationProp<ParamListBase>,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? nextHeaderlessGestureDirection === 'vertical' ||\n                  nextHeaderlessGestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : nextHeaderlessGestureDirection === 'horizontal-inverted'\n                    ? forSlideRight\n                    : forSlideLeft\n                : headerStyleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.descriptor.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.descriptor.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.descriptor.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}