{"ast":null,"code":"\"use strict\";\n\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport { findFocusedRoute } from \"./findFocusedRoute.js\";\nimport { validatePathConfig } from \"./validatePathConfig.js\";\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport function getStateFromPath(path, options) {\n  const {\n    initialRoutes,\n    configs,\n    configWithRegexes\n  } = getConfigResources(options);\n  const screens = options?.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n  if (prefix) {\n    // Make sure there is a trailing slash\n    const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n    // If the path doesn't start with the prefix, it's not a match\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n\n    // Remove the prefix from the path\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n    return undefined;\n  }\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every(\n    // Make sure that none of the parent configs have a non-empty path defined\n    name => !configs.find(c => c.screen === name)?.path));\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configWithRegexes);\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\n\n/**\n * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n */\nconst cachedConfigResources = new WeakMap();\nfunction getConfigResources(options) {\n  if (!options) return prepareConfigResources();\n  const cached = cachedConfigResources.get(options);\n  if (cached) return cached;\n  const resources = prepareConfigResources(options);\n  cachedConfigResources.set(options, resources);\n  return resources;\n}\nfunction prepareConfigResources(options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  const initialRoutes = getInitialRoutes(options);\n  const configs = getNormalizedConfigs(initialRoutes, options?.screens);\n  checkForDuplicatedConfigs(configs);\n  const configWithRegexes = getConfigsWithRegexes(configs);\n  return {\n    initialRoutes,\n    configs,\n    configWithRegexes\n  };\n}\nfunction getInitialRoutes(options) {\n  const initialRoutes = [];\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  return initialRoutes;\n}\nfunction getNormalizedConfigs(initialRoutes) {\n  let screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Create a normalized configs array which will be easier to use\n  return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (bParts[i] == null) {\n        return -1;\n      }\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n}\nfunction checkForDuplicatedConfigs(configs) {\n  // Check for duplicate patterns in the config\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n}\nfunction getConfigsWithRegexes(configs) {\n  return configs.map(c => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  }));\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n        if (!p.startsWith(':')) {\n          return acc;\n        }\n\n        // Path parameter so increment position for the segment\n        acc.pos += 1;\n        const decodedParamSegment = decodeURIComponent(\n        // The param segments appear every second item starting from 2 in the regex match result\n        match[(acc.pos + 1) * 2]\n        // Remove trailing slash\n        .replace(/\\/$/, ''));\n        Object.assign(acc.matchedParams, {\n          [p]: Object.assign(acc.matchedParams[p] || {}, {\n            [index]: decodedParamSegment\n          })\n        });\n        return acc;\n      }, {\n        pos: -1,\n        matchedParams: {}\n      });\n      const matchedParams = matchResult.matchedParams || {};\n      routes = config.routeNames.map(name => {\n        const routeConfig = configs.find(c => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n        // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n        .replace(new RegExp(`${escape(normalizedPath)}$`), '')?.split('/').length;\n        const params = normalizedPath?.split('/').reduce((acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Get the real index of the path parameter in the matched path\n          // by offsetting by the number of segments in the initial pattern\n          const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n          const value = matchedParams[p]?.[index + offset];\n          if (value) {\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  const state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = {\n      ...route.params,\n      ...params\n    };\n  }\n  return state;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","configs","configWithRegexes","getConfigResources","screens","remaining","replace","endsWith","prefix","normalizedPrefix","startsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","match","find","config","routeNames","every","c","screen","result","current","remainingPath","matchAgainstConfigs","cachedConfigResources","WeakMap","prepareConfigResources","cached","get","resources","set","getInitialRoutes","getNormalizedConfigs","checkForDuplicatedConfigs","getConfigsWithRegexes","initialRouteName","push","parentScreens","arguments","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","join","localeCompare","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","intersects","it","Error","assign","regex","RegExp","source","joinPaths","_len","paths","Array","_key","p","matchResult","index","pos","decodedParamSegment","matchedParams","routeConfig","normalizedPath","numInitialSegments","params","offset","value","parse","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["C:\\Users\\rohan_gs\\bank-ez\\frontend\\node_modules\\@react-navigation\\core\\src\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport { findFocusedRoute } from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport { validatePathConfig } from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\ntype ConfigResources = {\n  initialRoutes: InitialRouteConfig[];\n  configs: RouteConfig[];\n  configWithRegexes: RouteConfig[];\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  const { initialRoutes, configs, configWithRegexes } =\n    getConfigResources(options);\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n  if (prefix) {\n    // Make sure there is a trailing slash\n    const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n    // If the path doesn't start with the prefix, it's not a match\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n\n    // Remove the prefix from the path\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configWithRegexes\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\n/**\n * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n */\nconst cachedConfigResources = new WeakMap<Options<{}>, ConfigResources>();\n\nfunction getConfigResources<ParamList extends {}>(\n  options: Options<ParamList> | undefined\n) {\n  if (!options) return prepareConfigResources();\n\n  const cached = cachedConfigResources.get(options);\n\n  if (cached) return cached;\n\n  const resources = prepareConfigResources(options);\n\n  cachedConfigResources.set(options, resources);\n\n  return resources;\n}\n\nfunction prepareConfigResources(options?: Options<{}>) {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const initialRoutes = getInitialRoutes(options);\n\n  const configs = getNormalizedConfigs(initialRoutes, options?.screens);\n\n  checkForDuplicatedConfigs(configs);\n\n  const configWithRegexes = getConfigsWithRegexes(configs);\n\n  return {\n    initialRoutes,\n    configs,\n    configWithRegexes,\n  };\n}\n\nfunction getInitialRoutes(options?: Options<{}>) {\n  const initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  return initialRoutes;\n}\n\nfunction getNormalizedConfigs(\n  initialRoutes: InitialRouteConfig[],\n  screens: PathConfigMap<object> = {}\n) {\n  // Create a normalized configs array which will be easier to use\n  return ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n}\n\nfunction checkForDuplicatedConfigs(configs: RouteConfig[]) {\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n}\n\nfunction getConfigsWithRegexes(configs: RouteConfig[]) {\n  return configs.map((c) => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n  }));\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Path parameter so increment position for the segment\n          acc.pos += 1;\n\n          const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path\n          .split('/')\n          .filter(Boolean)\n          .join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            const value = matchedParams[p]?.[index + offset];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig?.parse?.[key]\n                ? routeConfig.parse[key](value)\n                : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  const state: InitialState = createStateObject(\n    initialRoute,\n    route,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}